package dnaandstuff;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * Toby Xia
 * Mr. Schattman
 * Final Project
 * 2016-01-19
 */
public class MainUI extends javax.swing.JFrame {

    Animation screen; 
    Board mainBoard;
    Thread animationThread; 
    Learn infoBox;
    
    //Initial replication chance is 0 
    int replicationErrorChance = 0; 
    
    public MainUI() {
        initComponents();
        
        //set up the board objects
        mainBoard = new Board(); 
        screen = new Animation(animationView,mainBoard);
        screen.paintImage(); //by calling paintImage the first time, initializes the screen board object
        
        
        animationThread = new Thread(screen); //starts the animation in a thread
        animationThread.start(); 
        
        //Setting up initial
        screen.b.replicationError = replicationErrorChance; 
        screen.sleepTime = 10; //pH of 7 = (7-5) * 5
        
        //sets infoBox to a jPanel on learn
        infoBox = new Learn (learnColour);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        animationView = new javax.swing.JPanel();
        induceRep = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        statusDIS = new java.awt.Label();
        repPER = new javax.swing.JSlider();
        replicationLabel = new javax.swing.JLabel();
        cellphDIS = new javax.swing.JLabel();
        phmove = new javax.swing.JSlider();
        pathogenChooser = new javax.swing.JComboBox();
        addPathogen = new javax.swing.JButton();
        currentlyviewing = new javax.swing.JLabel();
        learnColour = new javax.swing.JPanel();
        infotext = new javax.swing.JLabel();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        animationView.setBackground(new java.awt.Color(40, 60, 60));
        animationView.setPreferredSize(new java.awt.Dimension(0, 360));
        animationView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                animationViewMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout animationViewLayout = new javax.swing.GroupLayout(animationView);
        animationView.setLayout(animationViewLayout);
        animationViewLayout.setHorizontalGroup(
            animationViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        animationViewLayout.setVerticalGroup(
            animationViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        induceRep.setText("Induce Healthy Mitosis");
        induceRep.setActionCommand("replicate");
        induceRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                induceRepActionPerformed(evt);
            }
        });

        pause.setText("Pause");
        pause.setActionCommand("pause");
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        statusDIS.setText("Inside the Nucleus: DNA and RNA Sythesis Learning Tool Suitable for Grade 11 Biology");

        repPER.setValue(0);
        repPER.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                repPERStateChanged(evt);
            }
        });

        replicationLabel.setText("Replication Error Chance: 0%");

        cellphDIS.setText("Cell pH: 7");

        phmove.setMaximum(14);
        phmove.setValue(7);
        phmove.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                phmoveStateChanged(evt);
            }
        });

        pathogenChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HIV", "Cancer (by correction failure)" }));
        pathogenChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathogenChooserActionPerformed(evt);
            }
        });

        addPathogen.setText("Add Disease");
        addPathogen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPathogenActionPerformed(evt);
            }
        });

        currentlyviewing.setText("Currently Viewing: Nothing");

        javax.swing.GroupLayout learnColourLayout = new javax.swing.GroupLayout(learnColour);
        learnColour.setLayout(learnColourLayout);
        learnColourLayout.setHorizontalGroup(
            learnColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        learnColourLayout.setVerticalGroup(
            learnColourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        infotext.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        infotext.setText("Simply click your mouse over an object to learn about it.");

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(animationView, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currentlyviewing))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(pathogenChooser, 0, 199, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPathogen)
                                .addGap(35, 35, 35))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(induceRep)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pause))
                                    .addComponent(replicationLabel)
                                    .addComponent(repPER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cellphDIS)
                                    .addComponent(phmove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reset)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statusDIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(272, 356, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(learnColour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(infotext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusDIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animationView, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(induceRep)
                            .addComponent(pause))
                        .addGap(40, 40, 40)
                        .addComponent(replicationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repPER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cellphDIS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phmove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pathogenChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addPathogen))
                        .addGap(186, 186, 186)
                        .addComponent(reset)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(currentlyviewing)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(learnColour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(infotext, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void induceRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_induceRepActionPerformed
        screen.b.turnOnReplication();
    }//GEN-LAST:event_induceRepActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
       //turning off and on the pause function 
        if (!screen.paused){
             screen.paused = true; 
             pause.setText("Unpause");
        }
        else{
            screen.paused = false; 
            
            pause.setText("Pause");
        }
        
       
    }//GEN-LAST:event_pauseActionPerformed

    private void pathogenChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathogenChooserActionPerformed
       //does nothing, can't be removed
    }//GEN-LAST:event_pathogenChooserActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        //resets UI elements and screen and screen.b values
        screen.b.reset(); 
        pause.setText("Pause");
        screen.paused = false; 
        
        replicationErrorChance = 0; 
        screen.b.replicationError = replicationErrorChance; 
        repPER.setValue(0);
        
        phmove.setValue(7);
        screen.sleepTime = 10; //pH of 7 = (7-5) * 5
        
        currentlyviewing.setText("You have reset the program!");
        infotext.setText("Program has been reset. Click on a cell component to learn about it");
        
    }//GEN-LAST:event_resetActionPerformed

    private void repPERStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_repPERStateChanged
        replicationErrorChance = repPER.getValue();
        
        //sets replication error
        screen.b.replicationError = replicationErrorChance; 
        
        replicationLabel.setText("Replication Error Chance: " + replicationErrorChance + "%");
    }//GEN-LAST:event_repPERStateChanged

    private void animationViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_animationViewMouseClicked
        int x = evt.getX();
        int y = evt.getY();
        
        //gets colour of image under mouse 
        Color c = new Color(screen.globalOutput.getRGB(x,y)); 
    
        
        try {
            //gets a string of info from infoBox
            String[] data = infoBox.getInfo(c, screen.b);
            
            currentlyviewing.setText("Currently Viewing: " + data[0]);
            infotext.setText(data[1]);
            
            
        } catch (IOException ex) { //incase image isn't there
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_animationViewMouseClicked

    private void phmoveStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_phmoveStateChanged
        cellphDIS.setText("Cell pH: " + phmove.getValue());
        int offset = Math.abs(5 - phmove.getValue()); 
        //sets pH
        screen.sleepTime = offset * 5; 
    }//GEN-LAST:event_phmoveStateChanged

    private void addPathogenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPathogenActionPerformed
        String pathogenName = (String) pathogenChooser.getSelectedItem(); 
        if (!pathogenName.equalsIgnoreCase("HIV")){
            screen.b.replicationError = 50; 
            this.repPER.setValue(50);
        }
        
       //adds the pathogen (HIV)
        screen.b.addPathogenNamed(pathogenName);
    }//GEN-LAST:event_addPathogenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPathogen;
    private javax.swing.JPanel animationView;
    private javax.swing.JLabel cellphDIS;
    private javax.swing.JLabel currentlyviewing;
    private javax.swing.JButton induceRep;
    private javax.swing.JLabel infotext;
    private javax.swing.JPanel learnColour;
    private javax.swing.JComboBox pathogenChooser;
    private javax.swing.JButton pause;
    private javax.swing.JSlider phmove;
    private javax.swing.JSlider repPER;
    private javax.swing.JLabel replicationLabel;
    private javax.swing.JButton reset;
    private java.awt.Label statusDIS;
    // End of variables declaration//GEN-END:variables
}
